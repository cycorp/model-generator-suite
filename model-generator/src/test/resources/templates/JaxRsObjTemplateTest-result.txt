/**
 * This code was autogenerated by ModelGenerator program. The ModelGenerator
 * creates Java Interfaces and Classes by introspecting the Cyc Knowledge Base.
 * It is strongly recommended not to make any changes to this file.
 * This will allow regeneration of code when the Cyc KB model changes with fewer
 * downstream changes. Please implement subclasses of the generated class to add
 * functionality.
 *
 * <p>This code corresponds to SomeClass in the Cyc KB.
 *
 * <p>
 * @author ModelGenerator
 * @author Vijay Raj
 * @version "%I%, %G%"
 * @since 0.90
 */

package com.cyc.template.ws;

import com.cyc.base.CycAccessManager;
import com.cyc.kb.*;
import com.cyc.kb.client.*;
import com.cyc.kb.exception.KbException;
import com.cyc.library.restfulserviceutil.param.DateParam;
import com.cyc.library.restfulserviceutil.service.CycRestfulWS;
import com.cyc.model.AbstractCycModelObject;
import com.cyc.model.ContextMap;
import com.cyc.model.SimpleContextMap;
import com.cyc.model.exception.ModelException;
import com.cyc.model.exception.ModelRuntimeException;
import com.cyc.query.Query;
import com.cyc.query.QueryFactory;
import com.cyc.query.exception.QueryConstructionException;
import com.cyc.template.cycImpl.CycBasedProjectImpl;
import com.cyc.template.cycImpl.CycorpSpecialInterestGroupImpl;
import com.cyc.template.cycImpl.SomeClassImpl;
import com.cyc.template.iface.CycBasedProject;
import com.cyc.template.iface.CycorpSpecialInterestGroup;
import com.cyc.template.iface.SomeClass;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Path("/someclass")
protected class SomeClassWS extends CycRestfulWS {
  
  @GET
  @Path("/list")
  @Produces({MediaType.APPLICATION_JSON})
  public Response getList(
          @QueryParam("context") String context,
          @QueryParam("predicateContext") String predicateContext) {
    try {
      return JSON_SERIALIZER.response(SomeClassImpl.getAllObjects(getContextMap(context, predicateContext)));
//      return JSON_SERIALIZER.response(SomeClassImpl.getAllIndividuals(getCollectionContext(context)));
    } catch (Exception ex) {
      return getSerializer().response(ex);
    }
  }
  
  @GET
  @Path("/name/{name}")
  @Produces({MediaType.APPLICATION_JSON})
  public Response getValue(
          @PathParam("name") String name,
          @QueryParam("context") String context,
          @QueryParam("predicateContext") String predicateContext) {
    try {
      return getSerializer().response(getSomeClass(name, context, predicateContext));
    } catch (Exception ex) {
      return getSerializer().response(ex);
    }
  }
  
  @GET
  @Path("/name/{name}/groupsReviewer")
  @Produces({MediaType.APPLICATION_JSON})
  public Response getGroupsReviewer(
          @PathParam("name") String name,
          @QueryParam("context") String context,
          @QueryParam("predicateContext") String predicateContext) {
    try {
      return getSerializer().response(getSomeClass(name, context, predicateContext).getGroupsReviewer() + "");
    } catch (Exception e) {
      return returnException(e);
    }
  }
  
/*
  @POST
  @Path("/name/{name}/groupsReviewer")
  @Produces({MediaType.APPLICATION_JSON})
  public Response setGroupsReviewer(
          @PathParam("name") String name,
          @QueryParam("context") String context,
          @QueryParam("predicateContext") String predicateContext,
          @QueryParam("cycorpSpecialInterestGroup") CycorpSpecialInterestGroup cycorpSpecialInterestGroup) {
    try {
      return getSerializer().response(getSomeClass(name, context, predicateContext).setGroupsReviewer() + "");
    } catch (Exception e) {
      return returnException(e);
    }
  }
*/
  
  @GET
  @Path("/name/{name}/cyclistPrimaryProject")
  @Produces({MediaType.APPLICATION_JSON})
  public Response getCyclistPrimaryProject(
          @PathParam("name") String name,
          @QueryParam("context") String context,
          @QueryParam("predicateContext") String predicateContext) {
    try {
      return getSerializer().response(getSomeClass(name, context, predicateContext).getCyclistPrimaryProject() + "");
    } catch (Exception e) {
      return returnException(e);
    }
  }
  
/*
  @GET
  @Path("/name/{name}/cyclistPrimaryProject")
  @Produces({MediaType.APPLICATION_JSON})
  public Response allCyclistPrimaryProject_type(
          @PathParam("name") String name,
          @QueryParam("context") String context,
          @QueryParam("predicateContext") String predicateContext) {
    try {
      return getSerializer().response(getSomeClass(name, context, predicateContext).allCyclistPrimaryProject_type() + "");
    } catch (Exception e) {
      return returnException(e);
    }
  }
*/
  
  
  // Protected
  
  @Override
  protected void initializeService() {
    super.initializeService();
    this.forceResponseType(MediaType.APPLICATION_JSON_TYPE);
  }

  protected SomeClass getSomeClass(
          String name,
          String collCtxParam, 
          String predCtxParam) throws ModelException {
    try {      
      if (name != null) {
        return new SomeClassImpl(
                getContextMap(collCtxParam, predCtxParam),
                ${class_obj.PrimaryImpl.InstanceType}Impl.findOrCreate(name));
      }
      return null;
    } catch (Exception e) {
      throw new ModelException(e.getMessage(), e);
    }
  }
  
  protected ContextMap getContextMap(String collCtxParam, String predCtxParam) throws ModelException {
    return new SimpleContextMap(
              getCollectionContext(collCtxParam),
              getPredicateContext(predCtxParam));
  }
  
  protected Context getCollectionContext(String param) throws ModelException {
    try {
      if (param != null) {
        return ContextImpl.get(param);
      }
      return SomeClassImpl.getDefaultContexts().getCollectionContext();
    } catch (Exception e) {
      throw new ModelException(e.getMessage(), e);
    }
  }
  
  protected Context getPredicateContext(String param) throws ModelException {
    try {
      if (param != null) {
        return ContextImpl.get(param);
      }
      return SomeClassImpl.getDefaultContexts().getRelationContext();
    } catch (Exception e) {
      throw new ModelException(e.getMessage(), e);
    }
  }
}