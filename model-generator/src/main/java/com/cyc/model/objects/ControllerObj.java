package com.cyc.model.objects;


import com.cyc.model.objects.MethodObj.FuncType;

@Deprecated
public class ControllerObj extends ModelObj {

  private InterfaceObj primaryImpl;
  private String controllerVar;

  public ControllerObj(InterfaceObj io) {
    this.setPrimaryImpl(io);

    String controllerNameStr = primaryImpl.getName();
    String controllerLCaseStr = Character.toLowerCase(controllerNameStr.charAt(0)) + controllerNameStr.substring(1, controllerNameStr.length());

    controllerVar = controllerNameStr.replaceAll("[a-z0-9_]+", "").toLowerCase() + "_var";
  }

  private String generateControllerPre() {


    String controllerNameStr = primaryImpl.getName();
    String controllerLCaseStr = Character.toLowerCase(controllerNameStr.charAt(0)) + controllerNameStr.substring(1, controllerNameStr.length());


    String controllerStr = "";

    controllerStr = controllerStr + "	CycAccess cyc = null;\n";
    // controllerStr = controllerStr + "	" + controllerNameStr + " " + controllerVar + " = new " + controllerNameStr + "Impl(\"UniversalVocabularyMt\", params.id);\n\n";

    controllerStr = controllerStr + "	def beforeInterceptor = {\n";
    controllerStr = controllerStr + "		if (cyc == null){\n";
    controllerStr = controllerStr + "			cyc = CycAccess.setCurrent(\"legolas.cyc.com\", 3600);\n";
    controllerStr = controllerStr + "		}\n";
    controllerStr = controllerStr + "	}\n\n";

    controllerStr = controllerStr + "	def afterInterceptor = {\n";
    controllerStr = controllerStr + "		//cyc.clear();\n";
    controllerStr = controllerStr + "	}\n\n";

    // Here we may not get a params.id
    //controllerStr = controllerStr + "def index() { render \"" + controllerNameStr + "Controller is alive!\"}";

    controllerStr = controllerStr + "	def delete () {\n";
    controllerStr = controllerStr + "		a" + controllerNameStr + ".delete();\n";
    controllerStr = controllerStr + "	}\n\n";

    return controllerStr;
  }

  public InterfaceObj getPrimaryImpl() {
    return primaryImpl;
  }

  public void setPrimaryImpl(InterfaceObj primaryImpl) {
    this.primaryImpl = primaryImpl;
  }

  public String toString() {

    String controllerNameStr = primaryImpl.getName();
    String controllerLCaseStr = Character.toLowerCase(controllerNameStr.charAt(0)) + controllerNameStr.substring(1, controllerNameStr.length());



    String controllerStr = "/**\n"
            + " * This code was autogenerated by ModelGenerator program. The ModelGenerator\n"
            + " * creates Java Servlets by introspecting the Cyc Knowledge Base.\n"
            + " * It is strongly recommended not to make any changes to this file. \n"
            + " * This will allow regeneration of code when the Cyc KB model changes with fewer\n"
            + " * downstream changes.\n"
            + " * \n"
            + " * The Controller corresponds to " + this.getCycName() + " in the Cyc KB. \n"           
            + " * and to " + this.getPrimaryImpl().getName() + " in the package " + this.getPrimaryImpl().getPackageName() + ". \n"
            + " * <p>\n"
            + " * \n"
            + " * @author ModelGenerator\n"
            + " * @author Vijay Raj\n"
            + " * @version \"%I%, %G%\"\n"
            + " * @since 0.90\n"
            + " */\n\n";

    controllerStr = controllerStr + "class HumanCyclistController {\n";


    controllerStr = controllerStr + generateControllerPre();

    /*Controller#show - HTTP:GET - CURD:Retrieve*/ 
    controllerStr = controllerStr + "	def show() {\n";
    
    controllerStr = controllerStr + "	" + controllerNameStr + " " + controllerVar + " = new " + controllerNameStr + "Impl(\"UniversalVocabularyMt\", params.id);\n\n";

    controllerStr = controllerStr + "		if (0) {\n";
    controllerStr = controllerStr + "		}\n";

    for (MethodObj mo : this.getPrimaryImpl().getMethods()) {
      if (mo.getfType().equals(FuncType.GET)) {
        controllerStr = controllerStr + "		else if (params.func == \"" + mo.getName() + "\") { \n";
        controllerStr = controllerStr + "			def context = params.context ?:\"UniversalVocabularyMt\";\n";
        controllerStr = controllerStr + "			def " + mo.getReturnValue().getName() + " = " + controllerVar + "." + mo.getName() + "(Context.get(context));\n";
        controllerStr = controllerStr + "			render " + mo.getReturnValue().getName() + ".toString();\n";
        controllerStr = controllerStr + "		}\n";
      } else if (mo.getfType().equals(FuncType.TYPE_GET_LIST)) {
        controllerStr = controllerStr + "		else if (params.func == \"" + mo.getName() + "\") { \n";
        controllerStr = controllerStr + "			def context = params.context ?:\"UniversalVocabularyMt\";\n";
        controllerStr = controllerStr + "			def bindingsList = " + controllerVar + "." + mo.getName() + "(Context.get(context));\n";
        controllerStr = controllerStr + "			render bindingsList.toString();\n";
        controllerStr = controllerStr + "		}\n";
      }
    }

    controllerStr = controllerStr + "		else if (params.func == \"json\") {\n";
    controllerStr = controllerStr + "			render " + controllerVar + ".toString();\n";
    controllerStr = controllerStr + "		}\n";

    controllerStr = controllerStr + "	}\n\n";

    /*Controller#save - HTTP:POST - CURD:Update*/ 
    controllerStr = controllerStr + "	def save() {\n";
    
    controllerStr = controllerStr + "	" + controllerNameStr + " " + controllerVar + " = new " + controllerNameStr + "Impl(\"UniversalVocabularyMt\", params.id);\n\n";
    
    controllerStr = controllerStr + "		if (0) {\n";
    controllerStr = controllerStr + "		}\n";

    for (MethodObj mo : this.getPrimaryImpl().getMethods()) {
      if (mo.getfType().equals(FuncType.SET)) {
        controllerStr = controllerStr + "		else if (params.func == \"" + mo.getName() + "\") { \n";
        controllerStr = controllerStr + "			def context = params.context ?:\"UniversalVocabularyMt\";\n";

        int count1 = 0;
        for (ArgumentObj arg : mo.getArguments()) {
          if (arg.isSObject()) {
            controllerStr = controllerStr + "			" + arg.getType() + " " + arg.getName() + " = new " + arg.getType() + "(params.name);\n";
          } else {
            controllerStr = controllerStr + "			" + arg.getType() + " " + arg.getName() + " = new " + arg.getType() + "Impl(params.name)" + ";\n";
          }
          count1++;
        }

        controllerStr = controllerStr + "			" + controllerVar + "." + mo.getName() + "(Context.get(context), ";

        int count2 = 0;
        for (ArgumentObj arg : mo.getArguments()) {
          if (arg.isSObject()) {
            controllerStr = controllerStr + arg.getName() + (count2 != mo.getArguments().size() - 1 ? ", " : "");
          } else {
            controllerStr = controllerStr + arg.getName() + ".getInstance()" + (count2 != mo.getArguments().size() - 1 ? ", " : "");
          }
          count2++;
        }
        controllerStr = controllerStr + ");\n";

        controllerStr = controllerStr + "		}\n";
      }
    }

    controllerStr = controllerStr + "	}\n\n";

    controllerStr = controllerStr + "}\n\n";

    controllerStr = controllerStr + "class UrlMappings {\n\n";

    controllerStr = controllerStr + "	static mappings = {\n";
    controllerStr = controllerStr + "		\"/$controller/$action?/$id?\"{\n";
    controllerStr = controllerStr + "			constraints {\n";
    controllerStr = controllerStr + "				// apply constraints here\n";
    controllerStr = controllerStr + "			}\n";
    controllerStr = controllerStr + "		}\n\n";

    controllerStr = controllerStr + "		\"/" + controllerNameStr + "/$id/$func?/$context?\"(controller: \"" + controllerNameStr + "\") {\n";
    controllerStr = controllerStr + "			action = [GET: \"show\", PUT: \"update\", DELETE: \"delete\", POST: \"save\"]\n";
    controllerStr = controllerStr + "		}\n\n";

    controllerStr = controllerStr + "		\"/\"(view:\"/index\")\n";
    controllerStr = controllerStr + "		\"500\"(view:'/error')\n";
    controllerStr = controllerStr + "	}\n";
    controllerStr = controllerStr + "}\n";

    return controllerStr;
  }
}
