#* General Java-related macros. 
   This file is loaded by com.cyc.model.templates.JavaTemplate.
*#


##  java_headers  ---------------------------------------------

#macro( java_headers )
/**
 * This code was autogenerated by ModelGenerator program. The ModelGenerator
 * creates Java Interfaces and Classes by introspecting the Cyc Knowledge Base.
 * It is strongly recommended not to make any changes to this file.
 * This will allow regeneration of code when the Cyc KB model changes with fewer
 * downstream changes. Please implement subclasses of the generated class to add
 * functionality.
 *
#if ( $cyc_name )
 * <p>This code corresponds to $cyc_name in the Cyc KB.
 *
#end
 * <p>
 * @author ModelGenerator
 * @author Vijay Raj
 * @version "%I%, %G%"
 * @since 0.90
 */

package $package;

#foreach( $import in $imports )
import $import;
#end
#end


##  method_javadoc  ---------------------------------------------

#macro( method_javadoc $method )
  /**
#foreach( $line in $method.Javadoc )
   * $line
#end
   */
#end


##  method_return_type  ---------------------------------------------

#macro( method_return_type $method )
#if( $method.ReturnValue && $method.ReturnValue.Type )
#if ($method.ReturnValue.ArgMod == 1)
#set( $returnType = $method.ReturnValue.Type + "[]")
#elseif ($method.ReturnValue.ArgMod == 2)
#set( $returnType = "List<" + $method.ReturnValue.Type + "> ")
#elseif ($method.ReturnValue.ArgMod == 3)
#set( $returnType = "Set<" + $method.ReturnValue.Type + "> ")
#else
#set( $returnType = $method.ReturnValue.Type )
#end
#else
#set( $returnType = "void" )
#end
$returnType#end



##  method_arguments_string  ---------------------------------------------

#macro( method_arguments_string $method )
#set( $argString = "" )
#foreach( $arg in $method.Arguments )
#if ($arg.ArgMod == 1)
#set( $argString = $argString + $arg.Type + "... " + $arg.Name)
#elseif ($arg.ArgMod == 2)
#set( $argString = $argString + "List<" + $arg.Type + "> " + $arg.Name)
#elseif ($arg.ArgMod == 3)
#set( $argString = $argString + "Set<" + $arg.Type + "> " + $arg.Name)
#else
#set( $argString = $argString + $arg.Type + " " + $arg.Name)
#end
#if( $foreach.hasNext )
  #set( $argString = $argString + ", " )
#end
#end
$argString#end


##  method_throws_string  ---------------------------------------------

#macro( method_throws_string $method )
#if( !$method.Exceptions.isEmpty() )
#set( $string = "throws " )
#foreach( $exception in $method.Exceptions )
#set( $string = $string + $exception )
#if( $foreach.hasNext )
  #set( $string = $string + ", " )
#end
#end
$string#end
#end


##  method_signature  ---------------------------------------------

#macro( method_signature $method )
#set( $returnType = "#method_return_type( $method )" )
#set( $argString = "#method_arguments_string( $method )" )
#set( $throws = "#method_throws_string( $method )" )
$method.BelongsToClass $method.Visibility $returnType $method.getName()($argString) $throws#end

