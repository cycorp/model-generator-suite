#java_headers()

$visibility class $name #class_extends( $superclass ) #class_implements( $interfaces ) {
  
  // Constructors
  
  public $name(ContextMap contexts, ${class_obj.PrimaryImpl.InstanceType} ${class_obj.PrimaryImpl.InstanceName}) throws ModelAPIException {
    //super(contexts, ${class_obj.PrimaryImpl.InstanceName}, getClassType());
    super(contexts, ${class_obj.PrimaryImpl.InstanceName});

    // @todo: We should use KB API default context reference, set by super() call
    this.contexts = contexts;
#*
    
    
    // This if statement is the logic that verifies membership in a class (isa, genls, genlPreds, etc)
    if (!individual.checkSuperType(contexts.getCollectionContext(), ${name}.getClassType())) {
      // only if its a new constant, which we don't have a way of knowing with current SAPI,
      // assert it as a Thingamabob
      //assignSupertypes(core);
      this.instance.superTypes(contexts.getCollectionContext(), ${name}.getClassType());
      this.instance.superTypes(Context.get("UniversalVocabularyMt"), ${name}.getClassType());
    }
*#

    try { 
      ${class_obj.MembershipLogic}

#foreach( $method in $class_obj.Methods )
      this.#predicate_prop( $method.Name ) = RelationImpl.get("${method.CycName}");
#end
    } catch (Exception e) {
      throw new ModelAPIException(e.getMessage(), e);
    }
  }
  
  public $name(Context ctx, ${class_obj.PrimaryImpl.InstanceType} ${class_obj.PrimaryImpl.InstanceName}) throws ModelAPIException {
    this(new SimpleContextMap(ctx), ${class_obj.PrimaryImpl.InstanceName});
  }
  
  public $name(String contextName, String ${class_obj.PrimaryImpl.InstanceName}Str) throws KBApiException, ModelAPIException {
    this(ContextImpl.get(contextName), ${class_obj.PrimaryImpl.InstanceType}Impl.get(${class_obj.PrimaryImpl.InstanceName}Str));
  }
  
  public $name(${class_obj.PrimaryImpl.InstanceType} ${class_obj.PrimaryImpl.InstanceName}) throws ModelAPIException {
    this(getDefaultContexts(), ${class_obj.PrimaryImpl.InstanceName});
  }
  
  public $name(String ${class_obj.PrimaryImpl.InstanceName}Str) throws KBApiException, ModelAPIException {
    this(${class_obj.PrimaryImpl.InstanceType}Impl.findOrCreate(${class_obj.PrimaryImpl.InstanceName}Str));
  }

#if (${class_obj.PrimaryImpl.RelationType} == "isa")
  // The NL find is a factory method, instead of a constructor, 
  // since it is more appropriate to return null when something is not found.
  public static $name createObject(Context ctx, String ${class_obj.PrimaryImpl.InstanceName}NLStr) throws ModelAPIException {
    try {
      ${class_obj.PrimaryImpl.InstanceType} ${class_obj.PrimaryImpl.InstanceName} = ${class_obj.PrimaryImpl.InstanceType}Impl.findOrCreate(${class_obj.PrimaryImpl.InstanceName}NLStr, ${name}.getClassType(), ctx);
      return new $name(new SimpleContextMap(ctx), ${class_obj.PrimaryImpl.InstanceName});
    } catch (KBApiException kae) {
      return null;
    }
  }
#else
  /*
  The following method is intended to find a specialization or quotedIsa of $name class. But the KB API/NL underneath it only
  support getting instances currently. 
  public static $name createObject(Context ctx, String ${class_obj.PrimaryImpl.InstanceName}NLStr) throws ModelAPIException
  */
#end

  public ${class_obj.PrimaryImpl.CoreType} getType() {
    return getClassType();
  }
  
  // Static
  
  public static ${class_obj.PrimaryImpl.CoreType} getClassType()  {
    if (core == null){
      try {
#*Adding Impl string here instead of changing getCoreType to return implementation class
because we use getCoreType in other places to represent return type as Interface*#
        core = ${class_obj.PrimaryImpl.CoreType}Impl.get("${class_obj.PrimaryImpl.CycName}");
      } catch (KBApiException e) {  
        throw new ModelAPIRuntimeException(e.getMessage(), e);
      }
    }
    return core;
  }
  
  public static ContextMap getDefaultContexts() throws ModelAPIException {
    if (defaultContexts == null) {
      try {
        defaultContexts = new SimpleContextMap(
                "${class_obj.ContextMap.CollectionContext}", 
                "${class_obj.ContextMap.RelationContext}");

      } catch (Exception e) {
        throw new ModelAPIException(e.getMessage(), e);
      }
    }
    return defaultContexts;
  }
  
  // TODO: Decide if we need the following two methods. They don't hurt, but should 
  // we expose lower level API (KBIndividual, KBCollection) to be accessible so easily?
  // If the user is using these frequently then there is an issue with the API.
  // Another point: Functionally the methods based on predicates defined here is 
  // all you can do with this concept. Ideally there should not be a need for accessing
  // lower level API core. We should probably make these private or protected
  public static java.util.Collection<${class_obj.PrimaryImpl.InstanceType}> getAll${class_obj.PrimaryImpl.InstanceType}s(Context context) throws ModelAPIException {
    // TODO: This logic might get more complicated, at the least, different for genls
    // and other types of relations (genlPreds, genlMts)
    try {
      return getClassType().<${class_obj.PrimaryImpl.InstanceType}>getInstances(context);
    } catch (Exception e) {
      throw new ModelAPIException(e.getMessage(), e);
    } 
  }
  
  public static java.util.Collection<${class_obj.PrimaryImpl.InstanceType}> getAll${class_obj.PrimaryImpl.InstanceType}s(ContextMap contexts) throws ModelAPIException {
    return getAll${class_obj.PrimaryImpl.InstanceType}s(contexts.getCollectionContext());
  }
  
  public static List<? extends ${class_obj.PrimaryImpl.Name}> getAllObjects(ContextMap contexts) throws ModelAPIException {
    java.util.Collection<${class_obj.PrimaryImpl.InstanceType}> insts = getAll${class_obj.PrimaryImpl.InstanceType}s(contexts);
    List<${class_obj.PrimaryImpl.Name}> all = new ArrayList<${class_obj.PrimaryImpl.Name}>();
    
    for (${class_obj.PrimaryImpl.InstanceType} inst : insts){
      all.add(new ${name}(contexts, inst));
    }
    return all;
  }
  
  
  // Public
  
#*
  @Override
  public List<${class_obj.PrimaryImpl.Name}> allSibling${class_obj.PrimaryImpl.Name}s(Context context) throws Exception {
    List<KBIndividual> inds = getClassType().subTypes(context, KBIndividual.class);
    List<${class_obj.PrimaryImpl.Name}> siblings = new ArrayList<${class_obj.PrimaryImpl.Name}>();
    //Context uvmt = Context.get("UniversalVocabularyMt");
    for (KBIndividual ind : inds){
      siblings.add(new ${name}(contexts, ind));
    }
    return siblings;
  }
  
  @Override
  public List<${class_obj.PrimaryImpl.Name}> allSibling${class_obj.PrimaryImpl.Name}s() throws Exception {
    return allSibling${class_obj.PrimaryImpl.Name}s(contexts.getCollectionContext());
  }
  *#
#mapi_class_methods( $methods )


  /**
   * throws ModelAPIRuntimeException wrapping all lower level RuntimeExceptions
   */
  public static boolean hasAsInstance(${class_obj.PrimaryImpl.InstanceType} kbobj) throws ModelAPIException {
    try {
      return kbobj.isInstanceOf(getClassType(), getDefaultContexts().getCollectionContext());
    } catch (RuntimeException e) {
      throw new ModelAPIRuntimeException(e.getMessage(), e);
    }
  }

  // Internal
  
  private static ${class_obj.PrimaryImpl.CoreType} core = null;
  private static ContextMap defaultContexts = null;
  private ContextMap contexts;

  // TODO: Check if we can make these static. They won't change after the
  // class is generated
#foreach( $method in $class_obj.Methods )
  final private Relation #predicate_prop( ${method.Name} );
#end
}
